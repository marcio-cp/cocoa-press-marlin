
/****************************************************************************
 *   This program is free software: you can redistribute it and/or modify   *
 *   it under the terms of the GNU General Public License as published by   *
 *   the Free Software Foundation, either version 3 of the License, or      *
 *   (at your option) any later version.                                    *
 *                                                                          *
 *   This program is distributed in the hope that it will be useful,        *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *   GNU General Public License for more details.                           *
 *                                                                          *
 *   To view a copy of the GNU General Public License, go to the following  *
 *   location: <http://www.gnu.org/licenses/>.                              *
 ****************************************************************************/

/**
 * This file was auto-generated using "svg2cpp.py"
 *
 * The encoding consists of x,y pairs with the min and max scaled to
 * 0x0000 and 0xFFFE. A single 0xFFFF in the data stream indicates the
 * start of a new closed path.
 */

#pragma once

constexpr float x_min = 0.000000;
constexpr float x_max = 480.000000;
constexpr float y_min = 0.000000;
constexpr float y_max = 272.000000;

const PROGMEM uint16_t z_neg[] = {0x7950, 0x51EA, 0x824E, 0x51EA, 0x824E, 0x71E2, 0x86CD, 0x71E2, 0x7DCF, 0x81DF, 0x74D1, 0x71E2, 0x7950, 0x71E2, 0x7950, 0x51EA};
const PROGMEM uint16_t z_pos[] = {0x7950, 0x41EE, 0x824E, 0x41EE, 0x824E, 0x21F5, 0x86CD, 0x21F5, 0x7DCF, 0x11F9, 0x74D0, 0x21F5, 0x7950, 0x21F5, 0x7950, 0x41EE};
const PROGMEM uint16_t y_neg[] = {0x3479, 0x56CF, 0x3EC6, 0x56CF, 0x3747, 0x7281, 0x3C6D, 0x7281, 0x2E61, 0x8059, 0x27D4, 0x7281, 0x2CFA, 0x7281, 0x3479, 0x56CF};
const PROGMEM uint16_t y_pos[] = {0x3BF9, 0x3B1D, 0x4645, 0x3B1D, 0x4DC4, 0x1F6B, 0x52EB, 0x1F6B, 0x4C5E, 0x1192, 0x3E52, 0x1F6B, 0x4378, 0x1F6B, 0x3BF9, 0x3B1D};
const PROGMEM uint16_t x_neg[] = {0x350E, 0x4209, 0x314E, 0x4FE2, 0x1CB5, 0x4FE2, 0x1AD6, 0x56CF, 0x1449, 0x48F6, 0x2255, 0x3B1D, 0x2075, 0x4209, 0x350E, 0x4209};
const PROGMEM uint16_t x_pos[] = {0x498C, 0x4209, 0x45CC, 0x4FE2, 0x5A65, 0x4FE2, 0x5885, 0x56CF, 0x6691, 0x48F6, 0x6004, 0x3B1D, 0x5E25, 0x4209, 0x498C, 0x4209};
const PROGMEM uint16_t syringe_fluid[] = {0xBB42, 0x1D8A, 0xB7B5, 0x1E61, 0xB439, 0x2135, 0xB363, 0x2459, 0xB363, 0x7FFB, 0xB40F, 0x8580, 0xBB1B, 0x886D, 0xBF0D, 0x87F0, 0xC2DB, 0x85D5, 0xC3E7, 0x831C, 0xC40C, 0x7D5B, 0xC40A, 0x27B9, 0xC405, 0x22A0, 0xC345, 0x21D5, 0xC298, 0x2099, 0xBF21, 0x1E1F, 0xBB42, 0x1D8A};
const PROGMEM uint16_t syringe[] = {0xC76F, 0x109C, 0xC19D, 0x0D5F, 0xBB8A, 0x0C53, 0xB57A, 0x0D7D, 0xAFAF, 0x10E0, 0xAE64, 0x133F, 0xAE05, 0x167B, 0xAE09, 0x1FB2, 0xAED3, 0x2309, 0xB087, 0x2513, 0xB1B8, 0x2658, 0xB1B8, 0x805F, 0xB2D8, 0x882B, 0xB5D2, 0x8E44, 0xB5D7, 0x968D, 0xB73A, 0x9C82, 0xBA57, 0x9FDE, 0xBA59, 0xA843, 0xBB10, 0xAA1E, 0xBC55, 0xAA25, 0xBD11, 0xA76A, 0xBD11, 0x9FDE, 0xC03D, 0x9C64, 0xC194, 0x963E, 0xC194, 0x8E44, 0xC4B0, 0x87B7, 0xC5B0, 0x7F5A, 0xC5B0, 0x25DE, 0xC8C2, 0x229E, 0xC963, 0x1DF4, 0xC95E, 0x154C, 0xC76F, 0x109C, 0xC76F, 0x109C, 0xFFFF, 0xB112, 0x1507, 0xB64F, 0x121A, 0xBBC6, 0x1123, 0xC13D, 0x1225, 0xC675, 0x1525, 0xC6AA, 0x1735, 0xC6AA, 0x1A1A, 0xC14A, 0x173F, 0xBBB4, 0x164C, 0xB61E, 0x173F, 0xB0BE, 0x1A1A, 0xB0C2, 0x15A7, 0xB112, 0x1507, 0xB112, 0x1507, 0xFFFF, 0xBF84, 0x8AF0, 0xBB57, 0x8CCF, 0xB74B, 0x8A31, 0xB5E5, 0x8792, 0xBA2C, 0x8910, 0xBE8A, 0x88D2, 0xC19B, 0x8785, 0xBF84, 0x8AF0, 0xBF84, 0x8AF0, 0xFFFF, 0xC2F5, 0x248B, 0xC2FA, 0x29BF, 0xC2F9, 0x804F, 0xC2DB, 0x8291, 0xC22F, 0x8443, 0xBEBF, 0x862A, 0xBB23, 0x8692, 0xB4F5, 0x83FA, 0xB472, 0x7FD1, 0xB472, 0x24B8, 0xB502, 0x22AC, 0xB80C, 0x2034, 0xBB63, 0x1F71, 0xBEEC, 0x2003, 0xC22F, 0x2260, 0xC2F2, 0x247F, 0xC2F3, 0x248B, 0xC2F5, 0x248B, 0xFFFF, 0xBEDC, 0x95D9, 0xBDF4, 0x99B2, 0xBBCA, 0x9B5D, 0xB999, 0x99EB, 0xB890, 0x9637, 0xB88E, 0x90BF, 0xBBB6, 0x91A5, 0xBEDE, 0x90C3, 0xBEDC, 0x95D9, 0xBEDC, 0x95D9, 0xFFFF, 0xC633, 0x205C, 0xC3DF, 0x2189, 0xC0ED, 0x1E62, 0xBD8A, 0x1D07, 0xB92D, 0x1D2E, 0xB50A, 0x1F90, 0xB341, 0x21BB, 0xB106, 0x2029, 0xB0BE, 0x1D94, 0xB61A, 0x1A85, 0xBBB4, 0x197F, 0xC14E, 0x1A85, 0xC6AA, 0x1D94, 0xC633, 0x205C, 0xC633, 0x205C};
const PROGMEM uint16_t syringe_outline[] = {0xC773, 0x108E, 0xC1A1, 0x0D50, 0xBB8E, 0x0C44, 0xB57E, 0x0D6E, 0xAFB3, 0x10D1, 0xAE68, 0x1330, 0xAE09, 0x166C, 0xAE0D, 0x1FA3, 0xAED7, 0x22FA, 0xB08B, 0x2504, 0xB1BC, 0x2649, 0xB1BC, 0x8050, 0xB2DC, 0x881D, 0xB5D6, 0x8E35, 0xB5DB, 0x967E, 0xB73E, 0x9C73, 0xBA5B, 0x9FD0, 0xBA5D, 0xA835, 0xBB14, 0xAA10, 0xBC59, 0xAA16, 0xBD15, 0xA75C, 0xBD15, 0x9FD0, 0xC041, 0x9C55, 0xC198, 0x9630, 0xC198, 0x8E35, 0xC4B4, 0x87A9, 0xC5B4, 0x7F4C, 0xC5B4, 0x25D0, 0xC8C6, 0x228F, 0xC967, 0x1DE5, 0xC962, 0x153E, 0xC773, 0x108E, 0xC773, 0x108E};
const PROGMEM uint16_t padlock[] = {0x48C8, 0x47C8, 0x47CC, 0x47C8, 0x47CC, 0x3A84, 0x470C, 0x33DF, 0x44EA, 0x2E3D, 0x41B9, 0x2A7A, 0x3DF5, 0x2927, 0x3DD8, 0x2927, 0x3A0F, 0x2A99, 0x36F8, 0x2E62, 0x34E2, 0x33F3, 0x341E, 0x3AB8, 0x341E, 0x4181, 0x3540, 0x44F9, 0x3785, 0x44F9, 0x38A8, 0x4181, 0x38A8, 0x3A84, 0x3A3D, 0x33DC, 0x3E09, 0x312B, 0x41B9, 0x3404, 0x4341, 0x3AAE, 0x4341, 0x47C8, 0x3322, 0x47C8, 0x3259, 0x492B, 0x3259, 0x6146, 0x3395, 0x6684, 0x368D, 0x68B1, 0x455C, 0x68B1, 0x4855, 0x6684, 0x4991, 0x6146, 0x4991, 0x492B, 0x48C8, 0x47C8, 0x48C8, 0x47C8, 0xFFFF, 0x3E11, 0x2E65, 0x3B68, 0x2F45, 0x3924, 0x31E2, 0x37A0, 0x35D6, 0x3717, 0x3A84, 0x3717, 0x4182, 0x36BD, 0x4294, 0x360A, 0x4294, 0x35B1, 0x4182, 0x35B1, 0x3AB9, 0x3655, 0x3505, 0x3816, 0x3055, 0x3AAF, 0x2D25, 0x3DDD, 0x2BEE, 0x410F, 0x2CFE, 0x43C5, 0x3025, 0x4596, 0x34E6, 0x463A, 0x3A85, 0x463A, 0x47C8, 0x44D4, 0x47C8, 0x44D4, 0x3AAE, 0x444C, 0x35F6, 0x42D8, 0x3213, 0x40B2, 0x2F6C, 0x3E11, 0x2E65, 0x3E11, 0x2E65, 0xFFFF, 0x47FF, 0x4A8D, 0x47FF, 0x5E1D, 0x33EC, 0x5E1D, 0x33EC, 0x4A8D, 0x47FF, 0x4A8D, 0xFFFF, 0x455C, 0x65EC, 0x368D, 0x65EC, 0x34B1, 0x648F, 0x33EB, 0x6146, 0x33EB, 0x5F97, 0x47FE, 0x5F97, 0x47FE, 0x6145, 0x4739, 0x648F, 0x455C, 0x65EC, 0x455C, 0x65EC};
const PROGMEM uint16_t usb_btn[] = {0x0558, 0xC0D6, 0x3BDB, 0xC0D6, 0x3BDB, 0xF431, 0x0558, 0xF431, 0x0558, 0xC0D6};
const PROGMEM uint16_t menu_btn[] = {0x416B, 0xC0D6, 0x77EE, 0xC0D6, 0x77EE, 0xF431, 0x416B, 0xF431, 0x416B, 0xC0D6};
const PROGMEM uint16_t e_pos[] = {0xE04E, 0x5E7B, 0xE94C, 0x5E7B, 0xE94C, 0x7E74, 0xEDCB, 0x7E74, 0xE4CD, 0x8E70, 0xDBCF, 0x7E74, 0xE04E, 0x7E74, 0xE04E, 0x5E7B};
const PROGMEM uint16_t e_neg[] = {0xE04E, 0x4E7F, 0xE94C, 0x4E7F, 0xE94C, 0x2E87, 0xEDCB, 0x2E87, 0xE4CD, 0x1E8A, 0xDBCF, 0x2E87, 0xE04E, 0x2E87, 0xE04E, 0x4E7F};
const PROGMEM uint16_t home_e[] = {0xF3CA, 0x5702, 0xE486, 0x39D8, 0xE3EE, 0x3962, 0xE356, 0x39D8, 0xDEB2, 0x42B4, 0xDEB2, 0x3CD8, 0xDE21, 0x3999, 0xDCBE, 0x3846, 0xDAB1, 0x3846, 0xD94D, 0x399A, 0xD8BC, 0x3CD8, 0xD8BC, 0x4E15, 0xD412, 0x5702, 0xD3EC, 0x588D, 0xD4AA, 0x5968, 0xD7DF, 0x5968, 0xD7DF, 0x749C, 0xD8AE, 0x760A, 0xEF2E, 0x760A, 0xEFFE, 0x749C, 0xEFFE, 0x5968, 0xF333, 0x5968, 0xF3F0, 0x588D, 0xF3CB, 0x5702, 0xF3CA, 0x5702, 0xFFFF, 0xD9D2, 0x3CD8, 0xDAB2, 0x3A2E, 0xDCBF, 0x3A2E, 0xDD9F, 0x3CD8, 0xDD9F, 0x44C4, 0xD9D3, 0x4C06, 0xD9D2, 0x3CD8, 0xFFFF, 0xE608, 0x732E, 0xE1D4, 0x732E, 0xE1D4, 0x6775, 0xE21D, 0x66F4, 0xE5BF, 0x66F4, 0xE608, 0x6775, 0xE608, 0x732E, 0xFFFF, 0xEF2E, 0x568D, 0xEE5F, 0x57FB, 0xEE5F, 0x732E, 0xE71C, 0x732E, 0xE71C, 0x6775, 0xE5BF, 0x650C, 0xE21D, 0x650C, 0xE0BF, 0x6775, 0xE0BF, 0x732E, 0xD97E, 0x732E, 0xD97E, 0x57FB, 0xD941, 0x56F8, 0xD8AE, 0x568D, 0xD683, 0x568D, 0xE3EE, 0x3CEA, 0xF157, 0x568D, 0xEF2E, 0x568D};
const PROGMEM uint16_t home_z[] = {0x8EC6, 0x48DD, 0x7F82, 0x2BB2, 0x7EEA, 0x2B3D, 0x7E52, 0x2BB2, 0x79AE, 0x348F, 0x79AE, 0x2EB3, 0x791D, 0x2B74, 0x77BA, 0x2A21, 0x75AD, 0x2A21, 0x7449, 0x2B75, 0x73B8, 0x2EB3, 0x73B8, 0x3FF0, 0x6F0E, 0x48DD, 0x6EE8, 0x4A68, 0x6FA6, 0x4B43, 0x72DB, 0x4B43, 0x72DB, 0x6677, 0x73AA, 0x67E5, 0x8A2A, 0x67E5, 0x8AFA, 0x6677, 0x8AFA, 0x4B43, 0x8E2F, 0x4B43, 0x8EEC, 0x4A68, 0x8EC7, 0x48DD, 0x8EC6, 0x48DD, 0xFFFF, 0x74CE, 0x2EB3, 0x75AE, 0x2C09, 0x77BB, 0x2C09, 0x789B, 0x2EB3, 0x789B, 0x369F, 0x74CF, 0x3DE1, 0x74CE, 0x2EB3, 0xFFFF, 0x8104, 0x6509, 0x7CD0, 0x6509, 0x7CD0, 0x5950, 0x7D19, 0x58CF, 0x80BB, 0x58CF, 0x8104, 0x5950, 0x8104, 0x6509, 0xFFFF, 0x8A2A, 0x4868, 0x895B, 0x49D5, 0x895B, 0x6509, 0x8218, 0x6509, 0x8218, 0x5950, 0x80BB, 0x56E7, 0x7D19, 0x56E7, 0x7BBB, 0x5950, 0x7BBB, 0x6509, 0x747A, 0x6509, 0x747A, 0x49D5, 0x743D, 0x48D3, 0x73AA, 0x4868, 0x717F, 0x4868, 0x7EEA, 0x2EC5, 0x8C53, 0x4868, 0x8A2A, 0x4868};
const PROGMEM uint16_t fine_label[] = {0x0D92, 0x9444, 0x5211, 0x9444, 0x5211, 0xA9EA, 0x0D92, 0xA9EA};
const PROGMEM uint16_t fine_toggle[] = {0x56E7, 0x9444, 0x8007, 0x9444, 0x8007, 0xA9EA, 0x56E7, 0xA9EA};
const PROGMEM uint16_t h1_temp[] = {0x9C2B, 0xDD3B, 0xBBDE, 0xDD3B, 0xBBDE, 0xFA57, 0x9C2B, 0xFA57};
const PROGMEM uint16_t h1_label[] = {0x9C2B, 0xBE8F, 0xBBDC, 0xBE8F, 0xBBDC, 0xDBAA, 0x9C2B, 0xDBAA};
const PROGMEM uint16_t h0_temp[] = {0x7BD0, 0xDD3B, 0x9B83, 0xDD3B, 0x9B83, 0xFA57, 0x7BD0, 0xFA57};
const PROGMEM uint16_t h0_label[] = {0x7BD0, 0xBE8F, 0x9B83, 0xBE8F, 0x9B83, 0xDBAA, 0x7BD0, 0xDBAA};
const PROGMEM uint16_t h2_temp[] = {0xBC86, 0xDD3B, 0xDC39, 0xDD3B, 0xDC39, 0xFA57, 0xBC86, 0xFA57};
const PROGMEM uint16_t h2_label[] = {0xBC86, 0xBE8F, 0xDC37, 0xBE8F, 0xDC37, 0xDBAA, 0xBC86, 0xDBAA};
const PROGMEM uint16_t h3_temp[] = {0xDCE2, 0xDD0D, 0xFC95, 0xDD0D, 0xFC95, 0xFA28, 0xDCE2, 0xFA28};
const PROGMEM uint16_t h3_label[] = {0xDCE2, 0xBE60, 0xFC92, 0xBE60, 0xFC92, 0xDB7C, 0xDCE2, 0xDB7C};
const PROGMEM uint16_t actual_temp[] = {0xCDF6, 0xD037, 0xF7CA, 0xD037, 0xF7CA, 0xF424, 0xCDF6, 0xF424};
const PROGMEM uint16_t bed_icon[] = {0xCDF6, 0xA5CC, 0xF7CA, 0xA5CC, 0xF7CA, 0xC9B9, 0xCDF6, 0xC9B9};
